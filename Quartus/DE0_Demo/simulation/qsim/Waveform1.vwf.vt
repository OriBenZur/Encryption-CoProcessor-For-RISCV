// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/15/2022 17:22:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          key_expander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module key_expander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] i;
reg [31:0] key_N_i;
reg [31:0] key_i_1;
reg [7:0] rc_i;
reg rst_n;
// wires                                               
wire [31:0] key_out;
wire [7:0] rc_out;

// assign statements (if any)                          
key_expander i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.i(i),
	.key_N_i(key_N_i),
	.key_i_1(key_i_1),
	.key_out(key_out),
	.rc_i(rc_i),
	.rc_out(rc_out),
	.rst_n(rst_n)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #30000 1'b1;
end 
// i[ 7 ]
initial
begin
	i[7] = 1'b0;
end 
// i[ 6 ]
initial
begin
	i[6] = 1'b0;
end 
// i[ 5 ]
initial
begin
	i[5] = 1'b0;
end 
// i[ 4 ]
initial
begin
	i[4] = 1'b0;
end 
// i[ 3 ]
initial
begin
	i[3] = 1'b0;
	i[3] = #50000 1'b1;
	i[3] = #30000 1'b0;
end 
// i[ 2 ]
initial
begin
	i[2] = 1'b0;
	i[2] = #30000 1'b1;
	i[2] = #20000 1'b0;
end 
// i[ 1 ]
initial
begin
	i[1] = 1'b0;
	i[1] = #30000 1'b1;
	i[1] = #20000 1'b0;
end 
// i[ 0 ]
initial
begin
	i[0] = 1'b0;
	i[0] = #30000 1'b1;
	i[0] = #20000 1'b0;
end 
// rc_i[ 7 ]
initial
begin
	rc_i[7] = 1'b0;
end 
// rc_i[ 6 ]
initial
begin
	rc_i[6] = 1'b0;
end 
// rc_i[ 5 ]
initial
begin
	rc_i[5] = 1'b0;
end 
// rc_i[ 4 ]
initial
begin
	rc_i[4] = 1'b0;
end 
// rc_i[ 3 ]
initial
begin
	rc_i[3] = 1'b0;
end 
// rc_i[ 2 ]
initial
begin
	rc_i[2] = 1'b0;
end 
// rc_i[ 1 ]
initial
begin
	rc_i[1] = 1'b0;
	rc_i[1] = #50000 1'b1;
	rc_i[1] = #30000 1'b0;
end 
// rc_i[ 0 ]
initial
begin
	rc_i[0] = 1'b0;
	rc_i[0] = #30000 1'b1;
	rc_i[0] = #20000 1'b0;
	rc_i[0] = #30000 1'b1;
	rc_i[0] = #30000 1'b0;
end 
// key_i_1[ 31 ]
initial
begin
	key_i_1[31] = 1'b0;
end 
// key_i_1[ 30 ]
initial
begin
	key_i_1[30] = 1'b1;
end 
// key_i_1[ 29 ]
initial
begin
	key_i_1[29] = 1'b1;
end 
// key_i_1[ 28 ]
initial
begin
	key_i_1[28] = 1'b0;
end 
// key_i_1[ 27 ]
initial
begin
	key_i_1[27] = 1'b0;
end 
// key_i_1[ 26 ]
initial
begin
	key_i_1[26] = 1'b0;
end 
// key_i_1[ 25 ]
initial
begin
	key_i_1[25] = 1'b1;
end 
// key_i_1[ 24 ]
initial
begin
	key_i_1[24] = 1'b0;
end 
// key_i_1[ 23 ]
initial
begin
	key_i_1[23] = 1'b0;
end 
// key_i_1[ 22 ]
initial
begin
	key_i_1[22] = 1'b1;
end 
// key_i_1[ 21 ]
initial
begin
	key_i_1[21] = 1'b1;
end 
// key_i_1[ 20 ]
initial
begin
	key_i_1[20] = 1'b0;
end 
// key_i_1[ 19 ]
initial
begin
	key_i_1[19] = 1'b0;
end 
// key_i_1[ 18 ]
initial
begin
	key_i_1[18] = 1'b0;
end 
// key_i_1[ 17 ]
initial
begin
	key_i_1[17] = 1'b1;
end 
// key_i_1[ 16 ]
initial
begin
	key_i_1[16] = 1'b1;
end 
// key_i_1[ 15 ]
initial
begin
	key_i_1[15] = 1'b0;
end 
// key_i_1[ 14 ]
initial
begin
	key_i_1[14] = 1'b1;
end 
// key_i_1[ 13 ]
initial
begin
	key_i_1[13] = 1'b1;
end 
// key_i_1[ 12 ]
initial
begin
	key_i_1[12] = 1'b0;
end 
// key_i_1[ 11 ]
initial
begin
	key_i_1[11] = 1'b0;
end 
// key_i_1[ 10 ]
initial
begin
	key_i_1[10] = 1'b0;
end 
// key_i_1[ 9 ]
initial
begin
	key_i_1[9] = 1'b1;
end 
// key_i_1[ 8 ]
initial
begin
	key_i_1[8] = 1'b1;
end 
// key_i_1[ 7 ]
initial
begin
	key_i_1[7] = 1'b0;
end 
// key_i_1[ 6 ]
initial
begin
	key_i_1[6] = 1'b1;
end 
// key_i_1[ 5 ]
initial
begin
	key_i_1[5] = 1'b1;
end 
// key_i_1[ 4 ]
initial
begin
	key_i_1[4] = 1'b0;
end 
// key_i_1[ 3 ]
initial
begin
	key_i_1[3] = 1'b0;
end 
// key_i_1[ 2 ]
initial
begin
	key_i_1[2] = 1'b0;
end 
// key_i_1[ 1 ]
initial
begin
	key_i_1[1] = 1'b1;
end 
// key_i_1[ 0 ]
initial
begin
	key_i_1[0] = 1'b1;
end 
// key_N_i[ 31 ]
initial
begin
	key_N_i[31] = 1'b0;
end 
// key_N_i[ 30 ]
initial
begin
	key_N_i[30] = 1'b0;
	key_N_i[30] = #50000 1'b1;
	key_N_i[30] = #30000 1'b0;
end 
// key_N_i[ 29 ]
initial
begin
	key_N_i[29] = 1'b0;
	key_N_i[29] = #50000 1'b1;
	key_N_i[29] = #30000 1'b0;
end 
// key_N_i[ 28 ]
initial
begin
	key_N_i[28] = 1'b0;
end 
// key_N_i[ 27 ]
initial
begin
	key_N_i[27] = 1'b0;
end 
// key_N_i[ 26 ]
initial
begin
	key_N_i[26] = 1'b0;
end 
// key_N_i[ 25 ]
initial
begin
	key_N_i[25] = 1'b0;
	key_N_i[25] = #50000 1'b1;
	key_N_i[25] = #30000 1'b0;
end 
// key_N_i[ 24 ]
initial
begin
	key_N_i[24] = 1'b0;
end 
// key_N_i[ 23 ]
initial
begin
	key_N_i[23] = 1'b0;
end 
// key_N_i[ 22 ]
initial
begin
	key_N_i[22] = 1'b0;
	key_N_i[22] = #50000 1'b1;
	key_N_i[22] = #30000 1'b0;
end 
// key_N_i[ 21 ]
initial
begin
	key_N_i[21] = 1'b0;
	key_N_i[21] = #50000 1'b1;
	key_N_i[21] = #30000 1'b0;
end 
// key_N_i[ 20 ]
initial
begin
	key_N_i[20] = 1'b0;
end 
// key_N_i[ 19 ]
initial
begin
	key_N_i[19] = 1'b0;
end 
// key_N_i[ 18 ]
initial
begin
	key_N_i[18] = 1'b0;
end 
// key_N_i[ 17 ]
initial
begin
	key_N_i[17] = 1'b0;
	key_N_i[17] = #50000 1'b1;
	key_N_i[17] = #30000 1'b0;
end 
// key_N_i[ 16 ]
initial
begin
	key_N_i[16] = 1'b0;
	key_N_i[16] = #50000 1'b1;
	key_N_i[16] = #30000 1'b0;
end 
// key_N_i[ 15 ]
initial
begin
	key_N_i[15] = 1'b0;
end 
// key_N_i[ 14 ]
initial
begin
	key_N_i[14] = 1'b0;
	key_N_i[14] = #50000 1'b1;
	key_N_i[14] = #30000 1'b0;
end 
// key_N_i[ 13 ]
initial
begin
	key_N_i[13] = 1'b0;
	key_N_i[13] = #50000 1'b1;
	key_N_i[13] = #30000 1'b0;
end 
// key_N_i[ 12 ]
initial
begin
	key_N_i[12] = 1'b0;
end 
// key_N_i[ 11 ]
initial
begin
	key_N_i[11] = 1'b0;
end 
// key_N_i[ 10 ]
initial
begin
	key_N_i[10] = 1'b0;
end 
// key_N_i[ 9 ]
initial
begin
	key_N_i[9] = 1'b0;
	key_N_i[9] = #50000 1'b1;
	key_N_i[9] = #30000 1'b0;
end 
// key_N_i[ 8 ]
initial
begin
	key_N_i[8] = 1'b0;
	key_N_i[8] = #50000 1'b1;
	key_N_i[8] = #30000 1'b0;
end 
// key_N_i[ 7 ]
initial
begin
	key_N_i[7] = 1'b0;
end 
// key_N_i[ 6 ]
initial
begin
	key_N_i[6] = 1'b0;
	key_N_i[6] = #50000 1'b1;
	key_N_i[6] = #30000 1'b0;
end 
// key_N_i[ 5 ]
initial
begin
	key_N_i[5] = 1'b0;
	key_N_i[5] = #50000 1'b1;
	key_N_i[5] = #30000 1'b0;
end 
// key_N_i[ 4 ]
initial
begin
	key_N_i[4] = 1'b0;
end 
// key_N_i[ 3 ]
initial
begin
	key_N_i[3] = 1'b0;
end 
// key_N_i[ 2 ]
initial
begin
	key_N_i[2] = 1'b0;
end 
// key_N_i[ 1 ]
initial
begin
	key_N_i[1] = 1'b0;
	key_N_i[1] = #50000 1'b1;
	key_N_i[1] = #30000 1'b0;
end 
// key_N_i[ 0 ]
initial
begin
	key_N_i[0] = 1'b0;
	key_N_i[0] = #50000 1'b1;
	key_N_i[0] = #30000 1'b0;
end 
endmodule

